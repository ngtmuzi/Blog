{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/css/article.styl","path":"css/article.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/base.styl","path":"css/base.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/mixins.styl","path":"css/mixins.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/css/variables.styl","path":"css/variables.styl","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":0,"renderable":1},{"_id":"themes/clean-blog/source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1485074449245},{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1485074146800},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1485074449241},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1485074449242},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1485074449246},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1485074449246},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1485074449249},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1485074449260},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1485074449258},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1485074449258},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1485074449258},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1485074449261},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1485074449263},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1485074449266},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1485074449265},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1485074449265},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1485074449277},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1485074449266},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1485074449267},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1485074449268},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1485074449268},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1485074449272},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1485074449393},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1485074449384},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1485074449397},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1485074449395},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1485074449396},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1485074449390},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1485074449402},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1485074449400},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1485074449399},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1485074449405},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1485074449403},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1485074449404},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1485074449407},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1485074449242},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1485074449408},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1485074449406},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1485074449410},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1485074449413},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1485074449436},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1485074449435},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1485074449436},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1485074449436},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1485074449481},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1485074449481},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1485074449437},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1485074449480},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1485074449494},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1485074449501},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1485074449490},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1485074449497},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1485074449496},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1485074449501},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1485074449499},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1485074449507},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1485074449502},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1485074449504},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1485074449506},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1485074449507},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1485074449508},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1485074449509},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1485074449510},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1485074449511},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1485074449512},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1485074449510},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1485074449512},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1485074449515},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1485074449515},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1485074449518},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1485074449524},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1485074449519},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1485074449516},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1485074449517},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1485074449517},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1485074449518},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1485074449517},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1485074449519},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1485074449522},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1485074449525},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1485074449521},{"_id":"themes/clean-blog/README.md","hash":"4fa53a32f64f081660be607d9ed4f4efa28b3b25","modified":1485083344266},{"_id":"themes/clean-blog/LICENSE","hash":"34ac5e147727699d1bbc346b014f2e0bdfbb0947","modified":1485083344262},{"_id":"themes/clean-blog/_config.yml","hash":"f2f5f0d4918ca74cf8c86138b7bae284a7b9d649","modified":1485087453541},{"_id":"themes/clean-blog/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1485083344238},{"_id":"themes/clean-blog/.git/config","hash":"9d17f2a261a16d99780c56d35cf02da6578d0a57","modified":1485083344249},{"_id":"themes/clean-blog/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1485083336129},{"_id":"themes/clean-blog/.git/index","hash":"8693ecebbf29ac10b3a92d71c41f76b716675e83","modified":1485086979065},{"_id":"themes/clean-blog/.git/packed-refs","hash":"1dadbd4fdd53bbb7038fa2c7b3c71cd028c4ead4","modified":1485083344228},{"_id":"themes/clean-blog/languages/de.yml","hash":"02a98ba2b93e30a00ae7979fbe90b767a27290f0","modified":1485083344274},{"_id":"themes/clean-blog/languages/default.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1485083344277},{"_id":"themes/clean-blog/languages/en.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1485083344278},{"_id":"source/_posts/test.md","hash":"fb8014e99986a82a4d691e2e65dc335dc5ea57c0","modified":1485087932739},{"_id":"themes/clean-blog/languages/es.yml","hash":"fb089145368422ac47da9eb00fed05b15c904aa2","modified":1485083344280},{"_id":"themes/clean-blog/languages/fr.yml","hash":"10e3529b8492d7a7601d5b35b44d8fc9e8ea8d1b","modified":1485083344283},{"_id":"themes/clean-blog/languages/no.yml","hash":"5ce3a1043ff85cecf83f3b5b0cdad2df44fa0192","modified":1485083344286},{"_id":"themes/clean-blog/languages/pl.yml","hash":"6dc5d1b2aa75ae4c527089a770f43bafb91d80f4","modified":1485083344289},{"_id":"themes/clean-blog/languages/pt.yml","hash":"6a31d548092af8af9f25d859063b0589c23ce13a","modified":1485083344292},{"_id":"themes/clean-blog/languages/ru.yml","hash":"2cfaf93704ea4ac3f374c69bab89ca31916faa33","modified":1485083344295},{"_id":"themes/clean-blog/languages/zh-CN.yml","hash":"6d712d9eb6ba12213dcd76b532cd86e9da83cfa3","modified":1485083344298},{"_id":"themes/clean-blog/languages/zh-TW.yml","hash":"45c84384a05fdb7e32a3e2d498ea180be7dccfa9","modified":1485083344301},{"_id":"themes/clean-blog/layout/archive.ejs","hash":"3c3eaf652efe697fe6bbbcc66c346a98f94fe363","modified":1485083344527},{"_id":"themes/clean-blog/layout/index.ejs","hash":"f05ec4cd1b8d57c234ba54b14547015a0325fcf1","modified":1485084117413},{"_id":"themes/clean-blog/layout/layout.ejs","hash":"acc791dc4346c135ce4cac3cdeba6f96708115e5","modified":1485083344568},{"_id":"themes/clean-blog/layout/page.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1485083344570},{"_id":"themes/clean-blog/layout/post.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1485083344571},{"_id":"themes/clean-blog/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1485083336133},{"_id":"themes/clean-blog/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1485083336154},{"_id":"themes/clean-blog/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1485083336156},{"_id":"themes/clean-blog/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1485083336159},{"_id":"themes/clean-blog/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1485083336174},{"_id":"themes/clean-blog/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1485083336186},{"_id":"themes/clean-blog/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1485083336211},{"_id":"themes/clean-blog/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1485083336257},{"_id":"themes/clean-blog/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1485083336214},{"_id":"themes/clean-blog/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1485083336265},{"_id":"themes/clean-blog/.git/logs/HEAD","hash":"57d3ead26cb2a45bf69b5c99f5d7534d6342b5d1","modified":1485083344242},{"_id":"themes/clean-blog/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1485083336269},{"_id":"themes/clean-blog/layout/_partial/after-footer.ejs","hash":"da52d35a9a996e90a608a4b0f6cbe47cf512244f","modified":1485086185165},{"_id":"themes/clean-blog/layout/_partial/article-archive.ejs","hash":"75b9b24c226eda4884752a868177b590d3e8b06f","modified":1485083344361},{"_id":"themes/clean-blog/layout/_partial/article-categories.ejs","hash":"b494e4a50f63d66e545da449af18a7198a057bd6","modified":1485083344377},{"_id":"themes/clean-blog/layout/_partial/article-full.ejs","hash":"12b8388ca3c729104225e44f247246501c925c14","modified":1485083344398},{"_id":"themes/clean-blog/layout/_partial/article-index.ejs","hash":"4545f81383a7209ae582dd090ed2067dab7ffca3","modified":1485087843649},{"_id":"themes/clean-blog/layout/_partial/article-tags.ejs","hash":"12524df0c1ce5136a8f88cea2fe550f9e1b47b19","modified":1485083344439},{"_id":"themes/clean-blog/layout/_partial/comments.ejs","hash":"5cafed11b6cfbf22e83674676c0edc6c4420cc0d","modified":1485083344452},{"_id":"themes/clean-blog/layout/_partial/footer.ejs","hash":"8616d6fcb03ec41ea60e446cfb9273a5b8c83048","modified":1485083344456},{"_id":"themes/clean-blog/layout/_partial/gallery.ejs","hash":"15e9562d0f6146e25e22856693d1312cd3ade4af","modified":1485083344460},{"_id":"themes/clean-blog/layout/_partial/google-analytics.ejs","hash":"b287b7f66a53b51c7cd872ad1b15dfd20fb3e35d","modified":1485083344482},{"_id":"themes/clean-blog/layout/_partial/pagination.ejs","hash":"cd61e4dbbf6020ad094c8e66ec06e8c38ebcd122","modified":1485083344518},{"_id":"themes/clean-blog/layout/_partial/head.ejs","hash":"fd09195bf18eb47e64c33f5e5c86f09af474751c","modified":1485086203669},{"_id":"themes/clean-blog/layout/_partial/menu.ejs","hash":"3c51a2a2f950ab2ca80f10d3d3941d5d8cd08ec7","modified":1485083344515},{"_id":"themes/clean-blog/source/css/article.styl","hash":"768418ecaa2ff17f6fa81d72096627e05579fe93","modified":1485083344576},{"_id":"themes/clean-blog/source/css/base.styl","hash":"10a3579607a088a13eba8fa6dd66ce348eb56ac7","modified":1485083344580},{"_id":"themes/clean-blog/source/css/mixins.styl","hash":"83759fa86ab8b2cc78f5058f79a257545838f81e","modified":1485086994583},{"_id":"themes/clean-blog/source/css/style.styl","hash":"7200d572751c1f5888b3d0df25bf503a3f31ca2d","modified":1485083344607},{"_id":"themes/clean-blog/source/css/variables.styl","hash":"06e16f64020cbddf2c2c49ef45f940141a1b2ada","modified":1485083344610},{"_id":"themes/clean-blog/source/img/about-bg.jpg","hash":"d39126a6456f2bac0169d1779304725f179c9900","modified":1485083344615},{"_id":"themes/clean-blog/.git/objects/pack/pack-150961354dcaf41617990f9a9d18fb969ec0b9fb.idx","hash":"32e5daf443ca079417d364b3ef3a4144baae432b","modified":1485083343967},{"_id":"themes/clean-blog/.git/refs/heads/master","hash":"cce37529c01e70f25e6266bf6fb91c4c88b2f9fb","modified":1485083344241},{"_id":"themes/clean-blog/source/img/home-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1485083344625},{"_id":"themes/clean-blog/.git/logs/refs/heads/master","hash":"57d3ead26cb2a45bf69b5c99f5d7534d6342b5d1","modified":1485083344243},{"_id":"themes/clean-blog/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1485083344237},{"_id":"themes/clean-blog/source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1485083344620},{"_id":"themes/clean-blog/.git/logs/refs/remotes/origin/HEAD","hash":"57d3ead26cb2a45bf69b5c99f5d7534d6342b5d1","modified":1485083344234},{"_id":"themes/clean-blog/.git/objects/pack/pack-150961354dcaf41617990f9a9d18fb969ec0b9fb.pack","hash":"4cc90aed47a7c34d707952de5396981e230bfff1","modified":1485083344124},{"_id":"source/_posts/javascript模板渲染研究笔记（一）.md","hash":"65ee846f53df1914688f0a2bda9ac6ad8b4d498f","modified":1485089734974},{"_id":"source/_posts/个人博客绝赞内测中.md","hash":"b4bfa0ae2315aee2dfd3f7cb0cba6cdfccbc35fd","modified":1485089622330},{"_id":"source/_posts/javaScript的函数柯里化.md","hash":"e718474f07ed164765ace25e2a40b8ce660ce2c3","modified":1485089601587},{"_id":"source/_posts/promise的日常应用.md","hash":"99140a999f16029d470007ffe661c2e03165ab2d","modified":1485090474761},{"_id":"source/_posts/这是个测试.md","hash":"fb8014e99986a82a4d691e2e65dc335dc5ea57c0","modified":1485087932739}],"Category":[{"name":"随笔","_id":"ciy8mu6vi0001nomxulrr0h8b"},{"name":"班门弄斧","_id":"ciy8n2mve0007nomxiatbo476"}],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-01-22T08:35:33.612Z","updated":"2017-01-22T08:40:49.242Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy8f3ytf0000e4mxvpvohtqt","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"个人博客绝赞内测中","subtitle":"来自hexo","desc":"现在只是一个码农，如果没有个地方给自己打字的话会很难受的，算是边做边学， 做个博客出来看看吧","date":"2015-11-29T10:29:53.000Z","author":"ngtmuzi","_content":"现在只是一个码农，如果没有个地方给自己打字的话会很难受的，算是边做边学， 做个博客出来看看吧","source":"_posts/个人博客绝赞内测中.md","raw":"---\ntitle: 个人博客绝赞内测中  \nsubtitle: 来自hexo  \ndesc: 现在只是一个码农，如果没有个地方给自己打字的话会很难受的，算是边做边学， 做个博客出来看看吧\ndate: 2015-11-29 18:29:53\ntags:  \nauthor: ngtmuzi  \ncategory: 随笔  \n---\n现在只是一个码农，如果没有个地方给自己打字的话会很难受的，算是边做边学， 做个博客出来看看吧","slug":"个人博客绝赞内测中","published":1,"updated":"2017-01-22T12:53:42.330Z","_id":"ciy8mtben0000nomxc4m5gsp2","comments":1,"layout":"post","photos":[],"link":"","content":"<p>现在只是一个码农，如果没有个地方给自己打字的话会很难受的，算是边做边学， 做个博客出来看看吧</p>\n","excerpt":"","more":"<p>现在只是一个码农，如果没有个地方给自己打字的话会很难受的，算是边做边学， 做个博客出来看看吧</p>\n"},{"title":"javascript模板渲染研究笔记（一）","subtitle":null,"desc":"下面没有了","date":"2015-12-31T01:49:32.000Z","author":"ngtmuzi","_content":"只是一名本分的后端`nodejs`程序员的我被抓去写前端啦，前端各种东西都搞不懂啊，\n城里人真是会玩，各种框架各种脚本各种自动化各种模板渲染引擎各种转码，我也是被吓得不敢说话，\n然而代码还是要写的，研究了一通目前的各种主流框架（`angular`、`reactjs`、`vue`、`meteor`以及各种其他）\n之后，我最终还是决定使用`express`自带的`ejs`\n \n即使是各大主流框架，在很大程度上还是离不开`jquery`，我当然也是如此，使用`ejs`仅仅是想将一些数据直接在后端渲染好，避免提供过多没必要的ajax接口费时费力。\n\n然而`ejs`使用中也是各种不爽，在`html`中加上各种`<%%>`真是不怎么好看啊，\n有的时候webstorm显示出来好多错误，排版也炸了，写得真心累，\n然后想了想，为什么一定要在视图中加上一堆逻辑语句呢，\n这种写法实在难看（`reactjs`的`jsx语法`在我眼中当然觉得更难看），然后脑洞一开，\n我就想到了万能的`jquery`，jq创建新html元素的语法简直优雅，所有的属性操作都能通过js来完成，\n就可以远离那些不合常理的模板语言了\n\n因此我开始研究在`ejs`中加入jq的功能，`cheerio`模块包含了各种jq的核心功能，\n它通常的用途是html解析，做抓取之类的功能，然而它构建html元素的函数任然还保留着，\n因此可以将它加入到ejs里，使用更优雅的语法来构建html——\n\n去翻了一下`ejs`的源码，大概能理解模板引擎的运行原理了：将原有的模板字符串拆开，\n将模板符号中包含的代码或表达式进行相应的处理，\n然后再拼回完整的html……可能说得不是很明白，可以看看这样一段模板语言\n```ejs\n<h1>{{ 1+1 }}</h1>\n```\n所对应的中间函数：\n```javascript\nfunction () {\n  var out = '';\n  out += '<h1>';\n  out += escape(1 + 1);\n  out += '</h1>';\n  return new String(out);\n}\n```\n中间函数做了简化，实际上它还在我们看不见的地方做更多复杂的操作，以使我们能使用简单的语言来进行模板渲染。\n\n可以看出来它实际上是做了字符串的拼接操作，模板内包含的表达式也被转义后输出（防止嵌入html标签），\n那为什么不直接转义成\n\n```'\n<h1>' + escape(1 + 1) + '</h1>'\n```\n这种格式呢？因为需要支持各种看起来高大上的模板语法，如`if`、`each`之类的。\n\n---\n\n好像有点跑题，刚才的问题是，我如何将`cheerio`模块加入到`ejs`中呢？\n\n\n\n我们都知道，`ejs`中如果要将某些变量的值带到模板中渲染，\n需要在render时传递`locals`对象，在这个对象里存储所有渲染需要的变量。\n\n但实际上在使用模板引擎时，我们并不会使用名叫`locals`或者其他类似`data`之类的变量，而是能直接使用这个变量里提供的属性，\n原因是，在上面那个函数里，一般还会有类似这样的语句（或者以其他方式实现）\n```javascript\nfunction(locals){\n  with(locals){\n  ......\n  }\n}\n```\n模板引擎将传入的`locals`对象使用with语句添加到当前作用域中，\n使我们能直接通过属性名来取值，\n因此想要加入$对象，可以直接在传`locals`对象的时候丢进去：\n```javascript\nvar cheerio = require('cheerio');\nres.render('index',{ $:cheerio } );\n```\n\n这样子就能实现在`ejs`里实现类似这样的jq语法了\n```javascript\n<% for(var i = 0; i < 10; i++) {%>\n    <%- $('<a>').text(i.toString()).attr('href','#') %>\n<% } %>\n```","source":"_posts/javascript模板渲染研究笔记（一）.md","raw":"---\ntitle: javascript模板渲染研究笔记（一）  \nsubtitle: \ndesc: 下面没有了\ndate: 2015-12-31 9:49:32\ntags: javascript\nauthor: ngtmuzi  \ncategory: 班门弄斧  \n---\n只是一名本分的后端`nodejs`程序员的我被抓去写前端啦，前端各种东西都搞不懂啊，\n城里人真是会玩，各种框架各种脚本各种自动化各种模板渲染引擎各种转码，我也是被吓得不敢说话，\n然而代码还是要写的，研究了一通目前的各种主流框架（`angular`、`reactjs`、`vue`、`meteor`以及各种其他）\n之后，我最终还是决定使用`express`自带的`ejs`\n \n即使是各大主流框架，在很大程度上还是离不开`jquery`，我当然也是如此，使用`ejs`仅仅是想将一些数据直接在后端渲染好，避免提供过多没必要的ajax接口费时费力。\n\n然而`ejs`使用中也是各种不爽，在`html`中加上各种`<%%>`真是不怎么好看啊，\n有的时候webstorm显示出来好多错误，排版也炸了，写得真心累，\n然后想了想，为什么一定要在视图中加上一堆逻辑语句呢，\n这种写法实在难看（`reactjs`的`jsx语法`在我眼中当然觉得更难看），然后脑洞一开，\n我就想到了万能的`jquery`，jq创建新html元素的语法简直优雅，所有的属性操作都能通过js来完成，\n就可以远离那些不合常理的模板语言了\n\n因此我开始研究在`ejs`中加入jq的功能，`cheerio`模块包含了各种jq的核心功能，\n它通常的用途是html解析，做抓取之类的功能，然而它构建html元素的函数任然还保留着，\n因此可以将它加入到ejs里，使用更优雅的语法来构建html——\n\n去翻了一下`ejs`的源码，大概能理解模板引擎的运行原理了：将原有的模板字符串拆开，\n将模板符号中包含的代码或表达式进行相应的处理，\n然后再拼回完整的html……可能说得不是很明白，可以看看这样一段模板语言\n```ejs\n<h1>{{ 1+1 }}</h1>\n```\n所对应的中间函数：\n```javascript\nfunction () {\n  var out = '';\n  out += '<h1>';\n  out += escape(1 + 1);\n  out += '</h1>';\n  return new String(out);\n}\n```\n中间函数做了简化，实际上它还在我们看不见的地方做更多复杂的操作，以使我们能使用简单的语言来进行模板渲染。\n\n可以看出来它实际上是做了字符串的拼接操作，模板内包含的表达式也被转义后输出（防止嵌入html标签），\n那为什么不直接转义成\n\n```'\n<h1>' + escape(1 + 1) + '</h1>'\n```\n这种格式呢？因为需要支持各种看起来高大上的模板语法，如`if`、`each`之类的。\n\n---\n\n好像有点跑题，刚才的问题是，我如何将`cheerio`模块加入到`ejs`中呢？\n\n\n\n我们都知道，`ejs`中如果要将某些变量的值带到模板中渲染，\n需要在render时传递`locals`对象，在这个对象里存储所有渲染需要的变量。\n\n但实际上在使用模板引擎时，我们并不会使用名叫`locals`或者其他类似`data`之类的变量，而是能直接使用这个变量里提供的属性，\n原因是，在上面那个函数里，一般还会有类似这样的语句（或者以其他方式实现）\n```javascript\nfunction(locals){\n  with(locals){\n  ......\n  }\n}\n```\n模板引擎将传入的`locals`对象使用with语句添加到当前作用域中，\n使我们能直接通过属性名来取值，\n因此想要加入$对象，可以直接在传`locals`对象的时候丢进去：\n```javascript\nvar cheerio = require('cheerio');\nres.render('index',{ $:cheerio } );\n```\n\n这样子就能实现在`ejs`里实现类似这样的jq语法了\n```javascript\n<% for(var i = 0; i < 10; i++) {%>\n    <%- $('<a>').text(i.toString()).attr('href','#') %>\n<% } %>\n```","slug":"javascript模板渲染研究笔记（一）","published":1,"updated":"2017-01-22T12:55:34.974Z","_id":"ciy8n1om50005nomxw4kmnij6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>只是一名本分的后端<code>nodejs</code>程序员的我被抓去写前端啦，前端各种东西都搞不懂啊，<br>城里人真是会玩，各种框架各种脚本各种自动化各种模板渲染引擎各种转码，我也是被吓得不敢说话，<br>然而代码还是要写的，研究了一通目前的各种主流框架（<code>angular</code>、<code>reactjs</code>、<code>vue</code>、<code>meteor</code>以及各种其他）<br>之后，我最终还是决定使用<code>express</code>自带的<code>ejs</code></p>\n<p>即使是各大主流框架，在很大程度上还是离不开<code>jquery</code>，我当然也是如此，使用<code>ejs</code>仅仅是想将一些数据直接在后端渲染好，避免提供过多没必要的ajax接口费时费力。</p>\n<p>然而<code>ejs</code>使用中也是各种不爽，在<code>html</code>中加上各种<code>&lt;%%&gt;</code>真是不怎么好看啊，<br>有的时候webstorm显示出来好多错误，排版也炸了，写得真心累，<br>然后想了想，为什么一定要在视图中加上一堆逻辑语句呢，<br>这种写法实在难看（<code>reactjs</code>的<code>jsx语法</code>在我眼中当然觉得更难看），然后脑洞一开，<br>我就想到了万能的<code>jquery</code>，jq创建新html元素的语法简直优雅，所有的属性操作都能通过js来完成，<br>就可以远离那些不合常理的模板语言了</p>\n<p>因此我开始研究在<code>ejs</code>中加入jq的功能，<code>cheerio</code>模块包含了各种jq的核心功能，<br>它通常的用途是html解析，做抓取之类的功能，然而它构建html元素的函数任然还保留着，<br>因此可以将它加入到ejs里，使用更优雅的语法来构建html——</p>\n<p>去翻了一下<code>ejs</code>的源码，大概能理解模板引擎的运行原理了：将原有的模板字符串拆开，<br>将模板符号中包含的代码或表达式进行相应的处理，<br>然后再拼回完整的html……可能说得不是很明白，可以看看这样一段模板语言<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h1&gt;&#123;&#123; 1+1 &#125;&#125;&lt;/h1&gt;</div></pre></td></tr></table></figure></p>\n<p>所对应的中间函数：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> out = <span class=\"string\">''</span>;</div><div class=\"line\">  out += <span class=\"string\">'&lt;h1&gt;'</span>;</div><div class=\"line\">  out += <span class=\"built_in\">escape</span>(<span class=\"number\">1</span> + <span class=\"number\">1</span>);</div><div class=\"line\">  out += <span class=\"string\">'&lt;/h1&gt;'</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(out);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>中间函数做了简化，实际上它还在我们看不见的地方做更多复杂的操作，以使我们能使用简单的语言来进行模板渲染。</p>\n<p>可以看出来它实际上是做了字符串的拼接操作，模板内包含的表达式也被转义后输出（防止嵌入html标签），<br>那为什么不直接转义成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h1&gt;&apos; + escape(1 + 1) + &apos;&lt;/h1&gt;&apos;</div></pre></td></tr></table></figure>\n<p>这种格式呢？因为需要支持各种看起来高大上的模板语法，如<code>if</code>、<code>each</code>之类的。</p>\n<hr>\n<p>好像有点跑题，刚才的问题是，我如何将<code>cheerio</code>模块加入到<code>ejs</code>中呢？</p>\n<p>我们都知道，<code>ejs</code>中如果要将某些变量的值带到模板中渲染，<br>需要在render时传递<code>locals</code>对象，在这个对象里存储所有渲染需要的变量。</p>\n<p>但实际上在使用模板引擎时，我们并不会使用名叫<code>locals</code>或者其他类似<code>data</code>之类的变量，而是能直接使用这个变量里提供的属性，<br>原因是，在上面那个函数里，一般还会有类似这样的语句（或者以其他方式实现）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">locals</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">with</span>(locals)&#123;</div><div class=\"line\">  ......</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>模板引擎将传入的<code>locals</code>对象使用with语句添加到当前作用域中，<br>使我们能直接通过属性名来取值，<br>因此想要加入$对象，可以直接在传<code>locals</code>对象的时候丢进去：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">'cheerio'</span>);</div><div class=\"line\">res.render(<span class=\"string\">'index'</span>,&#123; <span class=\"attr\">$</span>:cheerio &#125; );</div></pre></td></tr></table></figure></p>\n<p>这样子就能实现在<code>ejs</code>里实现类似这样的jq语法了<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;%&gt;</div><div class=\"line\">    &lt;%- $('&lt;a&gt;').text(i.toString()).attr('href','#') %&gt;</div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>只是一名本分的后端<code>nodejs</code>程序员的我被抓去写前端啦，前端各种东西都搞不懂啊，<br>城里人真是会玩，各种框架各种脚本各种自动化各种模板渲染引擎各种转码，我也是被吓得不敢说话，<br>然而代码还是要写的，研究了一通目前的各种主流框架（<code>angular</code>、<code>reactjs</code>、<code>vue</code>、<code>meteor</code>以及各种其他）<br>之后，我最终还是决定使用<code>express</code>自带的<code>ejs</code></p>\n<p>即使是各大主流框架，在很大程度上还是离不开<code>jquery</code>，我当然也是如此，使用<code>ejs</code>仅仅是想将一些数据直接在后端渲染好，避免提供过多没必要的ajax接口费时费力。</p>\n<p>然而<code>ejs</code>使用中也是各种不爽，在<code>html</code>中加上各种<code>&lt;%%&gt;</code>真是不怎么好看啊，<br>有的时候webstorm显示出来好多错误，排版也炸了，写得真心累，<br>然后想了想，为什么一定要在视图中加上一堆逻辑语句呢，<br>这种写法实在难看（<code>reactjs</code>的<code>jsx语法</code>在我眼中当然觉得更难看），然后脑洞一开，<br>我就想到了万能的<code>jquery</code>，jq创建新html元素的语法简直优雅，所有的属性操作都能通过js来完成，<br>就可以远离那些不合常理的模板语言了</p>\n<p>因此我开始研究在<code>ejs</code>中加入jq的功能，<code>cheerio</code>模块包含了各种jq的核心功能，<br>它通常的用途是html解析，做抓取之类的功能，然而它构建html元素的函数任然还保留着，<br>因此可以将它加入到ejs里，使用更优雅的语法来构建html——</p>\n<p>去翻了一下<code>ejs</code>的源码，大概能理解模板引擎的运行原理了：将原有的模板字符串拆开，<br>将模板符号中包含的代码或表达式进行相应的处理，<br>然后再拼回完整的html……可能说得不是很明白，可以看看这样一段模板语言<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h1&gt;&#123;&#123; 1+1 &#125;&#125;&lt;/h1&gt;</div></pre></td></tr></table></figure></p>\n<p>所对应的中间函数：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> out = <span class=\"string\">''</span>;</div><div class=\"line\">  out += <span class=\"string\">'&lt;h1&gt;'</span>;</div><div class=\"line\">  out += <span class=\"built_in\">escape</span>(<span class=\"number\">1</span> + <span class=\"number\">1</span>);</div><div class=\"line\">  out += <span class=\"string\">'&lt;/h1&gt;'</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(out);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>中间函数做了简化，实际上它还在我们看不见的地方做更多复杂的操作，以使我们能使用简单的语言来进行模板渲染。</p>\n<p>可以看出来它实际上是做了字符串的拼接操作，模板内包含的表达式也被转义后输出（防止嵌入html标签），<br>那为什么不直接转义成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h1&gt;&apos; + escape(1 + 1) + &apos;&lt;/h1&gt;&apos;</div></pre></td></tr></table></figure>\n<p>这种格式呢？因为需要支持各种看起来高大上的模板语法，如<code>if</code>、<code>each</code>之类的。</p>\n<hr>\n<p>好像有点跑题，刚才的问题是，我如何将<code>cheerio</code>模块加入到<code>ejs</code>中呢？</p>\n<p>我们都知道，<code>ejs</code>中如果要将某些变量的值带到模板中渲染，<br>需要在render时传递<code>locals</code>对象，在这个对象里存储所有渲染需要的变量。</p>\n<p>但实际上在使用模板引擎时，我们并不会使用名叫<code>locals</code>或者其他类似<code>data</code>之类的变量，而是能直接使用这个变量里提供的属性，<br>原因是，在上面那个函数里，一般还会有类似这样的语句（或者以其他方式实现）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">locals</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">with</span>(locals)&#123;</div><div class=\"line\">  ......</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>模板引擎将传入的<code>locals</code>对象使用with语句添加到当前作用域中，<br>使我们能直接通过属性名来取值，<br>因此想要加入$对象，可以直接在传<code>locals</code>对象的时候丢进去：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">'cheerio'</span>);</div><div class=\"line\">res.render(<span class=\"string\">'index'</span>,&#123; <span class=\"attr\">$</span>:cheerio &#125; );</div></pre></td></tr></table></figure></p>\n<p>这样子就能实现在<code>ejs</code>里实现类似这样的jq语法了<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;%&gt;</div><div class=\"line\">    &lt;%- $('&lt;a&gt;').text(i.toString()).attr('href','#') %&gt;</div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n"},{"title":"javaScript的函数柯里化","desc":"柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数","date":"2016-01-07T02:11:18.000Z","author":"ngtmuzi","_content":"> 柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。这个技术由 Christopher Strachey 以逻辑学家 Haskell Curry 命名的，尽管它是 Moses Schnfinkel 和 Gottlob Frege 发明的。\n\n简单理解来说就是把一个函数带上经常用到的参数和上下文，生成一个新的函数的技术，lodash的柯里化函数写得好复杂看得不是很懂，自己想了一下应该不是很复杂才对：\n```javascript\nfunction curry(fn, context) {\n    function c() {\n        var args = this.concat(Array.prototype.slice.call(arguments));\n        if (args.length >= fn.length) return fn.apply(context, args);\n        return c.bind(args);\n    }\n\n    return c.bind([]);\n}\n```\n返回一个用于收集参数数组的函数，当参数达到原函数的参数长度时才调用原函数，参数数组传到新函数的this对象上以供调用，测试如下：\n\n```javascript\nvar _a = function (a, b) {\n    return a + b;\n};\nvar a = curry(_a);\n\nconsole.log(a(1, 2), a(2)(3), a()()(3)(4), a()()(4, 5))\n//运行结果： 3 5 7 9\n```","source":"_posts/javaScript的函数柯里化.md","raw":"---\ntitle: javaScript的函数柯里化  \ndesc: 柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数  \ndate: 2016-1-7 10:11:18  \ntags: javascript  \nauthor: ngtmuzi  \ncategory: 班门弄斧  \n---\n> 柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。这个技术由 Christopher Strachey 以逻辑学家 Haskell Curry 命名的，尽管它是 Moses Schnfinkel 和 Gottlob Frege 发明的。\n\n简单理解来说就是把一个函数带上经常用到的参数和上下文，生成一个新的函数的技术，lodash的柯里化函数写得好复杂看得不是很懂，自己想了一下应该不是很复杂才对：\n```javascript\nfunction curry(fn, context) {\n    function c() {\n        var args = this.concat(Array.prototype.slice.call(arguments));\n        if (args.length >= fn.length) return fn.apply(context, args);\n        return c.bind(args);\n    }\n\n    return c.bind([]);\n}\n```\n返回一个用于收集参数数组的函数，当参数达到原函数的参数长度时才调用原函数，参数数组传到新函数的this对象上以供调用，测试如下：\n\n```javascript\nvar _a = function (a, b) {\n    return a + b;\n};\nvar a = curry(_a);\n\nconsole.log(a(1, 2), a(2)(3), a()()(3)(4), a()()(4, 5))\n//运行结果： 3 5 7 9\n```","slug":"javaScript的函数柯里化","published":1,"updated":"2017-01-22T12:53:21.587Z","_id":"ciy8nsv9200009cmxqttxztok","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。这个技术由 Christopher Strachey 以逻辑学家 Haskell Curry 命名的，尽管它是 Moses Schnfinkel 和 Gottlob Frege 发明的。</p>\n</blockquote>\n<p>简单理解来说就是把一个函数带上经常用到的参数和上下文，生成一个新的函数的技术，lodash的柯里化函数写得好复杂看得不是很懂，自己想了一下应该不是很复杂才对：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">fn, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"keyword\">this</span>.concat(<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>));</div><div class=\"line\">        <span class=\"keyword\">if</span> (args.length &gt;= fn.length) <span class=\"keyword\">return</span> fn.apply(context, args);</div><div class=\"line\">        <span class=\"keyword\">return</span> c.bind(args);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> c.bind([]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>返回一个用于收集参数数组的函数，当参数达到原函数的参数长度时才调用原函数，参数数组传到新函数的this对象上以供调用，测试如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> _a = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a + b;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> a = curry(_a);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(a(<span class=\"number\">1</span>, <span class=\"number\">2</span>), a(<span class=\"number\">2</span>)(<span class=\"number\">3</span>), a()()(<span class=\"number\">3</span>)(<span class=\"number\">4</span>), a()()(<span class=\"number\">4</span>, <span class=\"number\">5</span>))</div><div class=\"line\"><span class=\"comment\">//运行结果： 3 5 7 9</span></div></pre></td></tr></table></figure>","excerpt":"","more":"<blockquote>\n<p>柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。这个技术由 Christopher Strachey 以逻辑学家 Haskell Curry 命名的，尽管它是 Moses Schnfinkel 和 Gottlob Frege 发明的。</p>\n</blockquote>\n<p>简单理解来说就是把一个函数带上经常用到的参数和上下文，生成一个新的函数的技术，lodash的柯里化函数写得好复杂看得不是很懂，自己想了一下应该不是很复杂才对：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">fn, context</span>) </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"keyword\">this</span>.concat(<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>));</div><div class=\"line\">        <span class=\"keyword\">if</span> (args.length &gt;= fn.length) <span class=\"keyword\">return</span> fn.apply(context, args);</div><div class=\"line\">        <span class=\"keyword\">return</span> c.bind(args);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> c.bind([]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>返回一个用于收集参数数组的函数，当参数达到原函数的参数长度时才调用原函数，参数数组传到新函数的this对象上以供调用，测试如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> _a = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a + b;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> a = curry(_a);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(a(<span class=\"number\">1</span>, <span class=\"number\">2</span>), a(<span class=\"number\">2</span>)(<span class=\"number\">3</span>), a()()(<span class=\"number\">3</span>)(<span class=\"number\">4</span>), a()()(<span class=\"number\">4</span>, <span class=\"number\">5</span>))</div><div class=\"line\"><span class=\"comment\">//运行结果： 3 5 7 9</span></div></pre></td></tr></table></figure>"},{"title":"这是个测试","date":"2017-01-22T08:56:56.000Z","_content":"博客还是迁到hexo吧，自己写虽然也能写出来，但是要考虑的地方太多，页面也不如现成的好看~","source":"_posts/这是个测试.md","raw":"---\ntitle: 这是个测试\ndate: 2017-01-22 16:56:56\ntags: 随笔\n---\n博客还是迁到hexo吧，自己写虽然也能写出来，但是要考虑的地方太多，页面也不如现成的好看~","slug":"这是个测试","published":1,"updated":"2017-01-22T12:25:32.739Z","_id":"ciy8o1rsv00049cmx6h85jb7r","comments":1,"layout":"post","photos":[],"link":"","content":"<p>博客还是迁到hexo吧，自己写虽然也能写出来，但是要考虑的地方太多，页面也不如现成的好看~</p>\n","excerpt":"","more":"<p>博客还是迁到hexo吧，自己写虽然也能写出来，但是要考虑的地方太多，页面也不如现成的好看~</p>\n"},{"title":"promise的日常应用","desc":"promise在异步处理上真是比原始的回调好了太多，promise大法好~","date":"2016-01-07T02:11:18.000Z","author":"ngtmuzi","_content":"`promise`在异步处理上真是比原始的回调好了太多，`promise`大法好~\n\n下面是一些日常工作中总结的各种神秘技巧：（使用`bluebird`模块）\n\n一般来说都是在`request`请求或数据库操作之后开始使用`promise`，当然要直接`Promise.resolve()`也是可以的\n\n\n`mongodb`模块原生返回`promise`对象，真是方便不少，不过它用的是`Q`模块，\n没太多精力去了解模块间差异的我会选择在初始连接数据库的时候更换`promise`库：\n`MongoClient.connect(mongoUrl, {promiseLibrary: Promise})`\n`mysql`方面好像除了`sequelize`外没什么比较好的`promise`的模块……\n因为目前的工作内容都是在`mongodb`上，对这方面也没做太多了解\n\n`redis`模块中`ioredis`据说不错，不过也没太多接触\n\n至于网络请求，自然是`request`的`promise`版：`request`-`promise`\n\n当以上模块返回了promise对象，就可以用then一路走到黑啦\n一般来说我的express路由处理函数都会以这样结尾：\n```javascript\nfunction getArticle(req, res, next) {\n  mongo.article.find(req.query).sort({postTime:-1}).toArray()\n    .then(res.ok, next);\n}\n```\n`res.ok`是自己为了方便而挂上的一个函数，一般类似于\n```javascript\n  res.ok  = res.json.bind(res);\n````\n`next`函数用于将错误传到路由处理函数的末端——错误处理函数，在那里进行统一的错误返回。\n\n后来想想，用`next`函数统一处理错误固然看来很cooooooool，但也正因为此，\n对于各种错误的描述无法被带过去——用户并不在意你到底是数据库炸了还是代码写错了，\n他只想要一个中文的对错误的合理解释，类似“账号密码不正确！”之类的东西，因此考虑了一下，还是改成如下形式：\n\n```javascript\nres.ok = function (data) {\n  res.send(200,data);\n};\nres.err = _.curry(function (code, err, ext) {\n  res.status(code || 500);\n  res.json({msg: err && err.message || err, ext: ext && ext.message || ext});\n});\n```\n使用了`lodash`模块将函数柯里化——大概就是这样，虽然不太好说明原理，总之这是一种能让我这样处理回调的一种技术\n\n```javascript\nsms.csGetStatusReportExEx()\n  .then(res.ok, res.err(502, '状态报告获取失败'));\n```\n真正的错误信息会被带在`ext`里字段返回，另外`res.ok`也改成调用适用性更好的`res.send`函数\n（注意这里有个坑，`res.send`一个数字的话它会以为你只返回一个http状态码，\n因此虽然`res.send(200,data)`这种格式已被弃用，但是在目前还是必须这么处理才行）","source":"_posts/promise的日常应用.md","raw":"---\ntitle: promise的日常应用    \ndesc: promise在异步处理上真是比原始的回调好了太多，promise大法好~  \ndate: 2016-1-7 10:11:18  \ntags: \n- nodejs\n- javascript\n- promise\n- express  \nauthor: ngtmuzi  \ncategory: 班门弄斧  \n---\n`promise`在异步处理上真是比原始的回调好了太多，`promise`大法好~\n\n下面是一些日常工作中总结的各种神秘技巧：（使用`bluebird`模块）\n\n一般来说都是在`request`请求或数据库操作之后开始使用`promise`，当然要直接`Promise.resolve()`也是可以的\n\n\n`mongodb`模块原生返回`promise`对象，真是方便不少，不过它用的是`Q`模块，\n没太多精力去了解模块间差异的我会选择在初始连接数据库的时候更换`promise`库：\n`MongoClient.connect(mongoUrl, {promiseLibrary: Promise})`\n`mysql`方面好像除了`sequelize`外没什么比较好的`promise`的模块……\n因为目前的工作内容都是在`mongodb`上，对这方面也没做太多了解\n\n`redis`模块中`ioredis`据说不错，不过也没太多接触\n\n至于网络请求，自然是`request`的`promise`版：`request`-`promise`\n\n当以上模块返回了promise对象，就可以用then一路走到黑啦\n一般来说我的express路由处理函数都会以这样结尾：\n```javascript\nfunction getArticle(req, res, next) {\n  mongo.article.find(req.query).sort({postTime:-1}).toArray()\n    .then(res.ok, next);\n}\n```\n`res.ok`是自己为了方便而挂上的一个函数，一般类似于\n```javascript\n  res.ok  = res.json.bind(res);\n````\n`next`函数用于将错误传到路由处理函数的末端——错误处理函数，在那里进行统一的错误返回。\n\n后来想想，用`next`函数统一处理错误固然看来很cooooooool，但也正因为此，\n对于各种错误的描述无法被带过去——用户并不在意你到底是数据库炸了还是代码写错了，\n他只想要一个中文的对错误的合理解释，类似“账号密码不正确！”之类的东西，因此考虑了一下，还是改成如下形式：\n\n```javascript\nres.ok = function (data) {\n  res.send(200,data);\n};\nres.err = _.curry(function (code, err, ext) {\n  res.status(code || 500);\n  res.json({msg: err && err.message || err, ext: ext && ext.message || ext});\n});\n```\n使用了`lodash`模块将函数柯里化——大概就是这样，虽然不太好说明原理，总之这是一种能让我这样处理回调的一种技术\n\n```javascript\nsms.csGetStatusReportExEx()\n  .then(res.ok, res.err(502, '状态报告获取失败'));\n```\n真正的错误信息会被带在`ext`里字段返回，另外`res.ok`也改成调用适用性更好的`res.send`函数\n（注意这里有个坑，`res.send`一个数字的话它会以为你只返回一个http状态码，\n因此虽然`res.send(200,data)`这种格式已被弃用，但是在目前还是必须这么处理才行）","slug":"promise的日常应用","published":1,"updated":"2017-01-22T13:07:54.761Z","_id":"ciy8o401r00069cmxgs3jv9ve","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>promise</code>在异步处理上真是比原始的回调好了太多，<code>promise</code>大法好~</p>\n<p>下面是一些日常工作中总结的各种神秘技巧：（使用<code>bluebird</code>模块）</p>\n<p>一般来说都是在<code>request</code>请求或数据库操作之后开始使用<code>promise</code>，当然要直接<code>Promise.resolve()</code>也是可以的</p>\n<p><code>mongodb</code>模块原生返回<code>promise</code>对象，真是方便不少，不过它用的是<code>Q</code>模块，<br>没太多精力去了解模块间差异的我会选择在初始连接数据库的时候更换<code>promise</code>库：<br><code>MongoClient.connect(mongoUrl, {promiseLibrary: Promise})</code><br><code>mysql</code>方面好像除了<code>sequelize</code>外没什么比较好的<code>promise</code>的模块……<br>因为目前的工作内容都是在<code>mongodb</code>上，对这方面也没做太多了解</p>\n<p><code>redis</code>模块中<code>ioredis</code>据说不错，不过也没太多接触</p>\n<p>至于网络请求，自然是<code>request</code>的<code>promise</code>版：<code>request</code>-<code>promise</code></p>\n<p>当以上模块返回了promise对象，就可以用then一路走到黑啦<br>一般来说我的express路由处理函数都会以这样结尾：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getArticle</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  mongo.article.find(req.query).sort(&#123;<span class=\"attr\">postTime</span>:<span class=\"number\">-1</span>&#125;).toArray()</div><div class=\"line\">    .then(res.ok, next);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>res.ok</code>是自己为了方便而挂上的一个函数，一般类似于<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">  res.ok  = res.json.bind(res);</div><div class=\"line\"><span class=\"string\">`</span></div></pre></td></tr></table></figure></p>\n<p><code>next</code>函数用于将错误传到路由处理函数的末端——错误处理函数，在那里进行统一的错误返回。</p>\n<p>后来想想，用<code>next</code>函数统一处理错误固然看来很cooooooool，但也正因为此，<br>对于各种错误的描述无法被带过去——用户并不在意你到底是数据库炸了还是代码写错了，<br>他只想要一个中文的对错误的合理解释，类似“账号密码不正确！”之类的东西，因此考虑了一下，还是改成如下形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">res.ok = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"number\">200</span>,data);</div><div class=\"line\">&#125;;</div><div class=\"line\">res.err = _.curry(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">code, err, ext</span>) </span>&#123;</div><div class=\"line\">  res.status(code || <span class=\"number\">500</span>);</div><div class=\"line\">  res.json(&#123;<span class=\"attr\">msg</span>: err &amp;&amp; err.message || err, <span class=\"attr\">ext</span>: ext &amp;&amp; ext.message || ext&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>使用了<code>lodash</code>模块将函数柯里化——大概就是这样，虽然不太好说明原理，总之这是一种能让我这样处理回调的一种技术</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sms.csGetStatusReportExEx()</div><div class=\"line\">  .then(res.ok, res.err(<span class=\"number\">502</span>, <span class=\"string\">'状态报告获取失败'</span>));</div></pre></td></tr></table></figure>\n<p>真正的错误信息会被带在<code>ext</code>里字段返回，另外<code>res.ok</code>也改成调用适用性更好的<code>res.send</code>函数<br>（注意这里有个坑，<code>res.send</code>一个数字的话它会以为你只返回一个http状态码，<br>因此虽然<code>res.send(200,data)</code>这种格式已被弃用，但是在目前还是必须这么处理才行）</p>\n","excerpt":"","more":"<p><code>promise</code>在异步处理上真是比原始的回调好了太多，<code>promise</code>大法好~</p>\n<p>下面是一些日常工作中总结的各种神秘技巧：（使用<code>bluebird</code>模块）</p>\n<p>一般来说都是在<code>request</code>请求或数据库操作之后开始使用<code>promise</code>，当然要直接<code>Promise.resolve()</code>也是可以的</p>\n<p><code>mongodb</code>模块原生返回<code>promise</code>对象，真是方便不少，不过它用的是<code>Q</code>模块，<br>没太多精力去了解模块间差异的我会选择在初始连接数据库的时候更换<code>promise</code>库：<br><code>MongoClient.connect(mongoUrl, {promiseLibrary: Promise})</code><br><code>mysql</code>方面好像除了<code>sequelize</code>外没什么比较好的<code>promise</code>的模块……<br>因为目前的工作内容都是在<code>mongodb</code>上，对这方面也没做太多了解</p>\n<p><code>redis</code>模块中<code>ioredis</code>据说不错，不过也没太多接触</p>\n<p>至于网络请求，自然是<code>request</code>的<code>promise</code>版：<code>request</code>-<code>promise</code></p>\n<p>当以上模块返回了promise对象，就可以用then一路走到黑啦<br>一般来说我的express路由处理函数都会以这样结尾：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getArticle</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  mongo.article.find(req.query).sort(&#123;<span class=\"attr\">postTime</span>:<span class=\"number\">-1</span>&#125;).toArray()</div><div class=\"line\">    .then(res.ok, next);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>res.ok</code>是自己为了方便而挂上的一个函数，一般类似于<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">  res.ok  = res.json.bind(res);</div><div class=\"line\"><span class=\"string\">`</span></div></pre></td></tr></table></figure></p>\n<p><code>next</code>函数用于将错误传到路由处理函数的末端——错误处理函数，在那里进行统一的错误返回。</p>\n<p>后来想想，用<code>next</code>函数统一处理错误固然看来很cooooooool，但也正因为此，<br>对于各种错误的描述无法被带过去——用户并不在意你到底是数据库炸了还是代码写错了，<br>他只想要一个中文的对错误的合理解释，类似“账号密码不正确！”之类的东西，因此考虑了一下，还是改成如下形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">res.ok = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"number\">200</span>,data);</div><div class=\"line\">&#125;;</div><div class=\"line\">res.err = _.curry(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">code, err, ext</span>) </span>&#123;</div><div class=\"line\">  res.status(code || <span class=\"number\">500</span>);</div><div class=\"line\">  res.json(&#123;<span class=\"attr\">msg</span>: err &amp;&amp; err.message || err, <span class=\"attr\">ext</span>: ext &amp;&amp; ext.message || ext&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>使用了<code>lodash</code>模块将函数柯里化——大概就是这样，虽然不太好说明原理，总之这是一种能让我这样处理回调的一种技术</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sms.csGetStatusReportExEx()</div><div class=\"line\">  .then(res.ok, res.err(<span class=\"number\">502</span>, <span class=\"string\">'状态报告获取失败'</span>));</div></pre></td></tr></table></figure>\n<p>真正的错误信息会被带在<code>ext</code>里字段返回，另外<code>res.ok</code>也改成调用适用性更好的<code>res.send</code>函数<br>（注意这里有个坑，<code>res.send</code>一个数字的话它会以为你只返回一个http状态码，<br>因此虽然<code>res.send(200,data)</code>这种格式已被弃用，但是在目前还是必须这么处理才行）</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciy8mtben0000nomxc4m5gsp2","category_id":"ciy8mu6vi0001nomxulrr0h8b","_id":"ciy8mu6vk0002nomxj5l1amfo"},{"post_id":"ciy8n1om50005nomxw4kmnij6","category_id":"ciy8n2mve0007nomxiatbo476","_id":"ciy8n2mvf0008nomx5zcsd668"},{"post_id":"ciy8nsv9200009cmxqttxztok","category_id":"ciy8n2mve0007nomxiatbo476","_id":"ciy8nvkv800039cmxkf3yxe7j"},{"post_id":"ciy8o401r00069cmxgs3jv9ve","category_id":"ciy8n2mve0007nomxiatbo476","_id":"ciy8o402100089cmx4sapkgf9"}],"PostTag":[{"post_id":"ciy8n1om50005nomxw4kmnij6","tag_id":"ciy8n32n20009nomxto24zmmx","_id":"ciy8n32n4000anomx5nwotjxc"},{"post_id":"ciy8nsv9200009cmxqttxztok","tag_id":"ciy8n32n20009nomxto24zmmx","_id":"ciy8nvkv700029cmxgbmov0px"},{"post_id":"ciy8o1rsv00049cmx6h85jb7r","tag_id":"ciy8n07pr0003nomxihtsadlc","_id":"ciy8o1rsy00059cmxb1uiygs8"},{"post_id":"ciy8o401r00069cmxgs3jv9ve","tag_id":"ciy8oiw520000k8mxchdwvtj3","_id":"ciy8oiw540003k8mx0itw32mi"},{"post_id":"ciy8o401r00069cmxgs3jv9ve","tag_id":"ciy8n32n20009nomxto24zmmx","_id":"ciy8oiw540004k8mx8ylsg1ee"},{"post_id":"ciy8o401r00069cmxgs3jv9ve","tag_id":"ciy8oiw530001k8mx75578t94","_id":"ciy8oiw540005k8mxmswfkh46"},{"post_id":"ciy8o401r00069cmxgs3jv9ve","tag_id":"ciy8oiw540002k8mx4nvv9qcc","_id":"ciy8oiw540006k8mxs6j55cws"}],"Tag":[{"name":"随笔","_id":"ciy8n07pr0003nomxihtsadlc"},{"name":"javascript","_id":"ciy8n32n20009nomxto24zmmx"},{"name":"nodejs javascript promise express","_id":"ciy8o5wgj00099cmxwkb978f3"},{"name":"nodejs,javascript,promise,express","_id":"ciy8o6c1l000b9cmxq5h9dtb3"},{"name":"nodejs  javascript,promise,express","_id":"ciy8o6lk7000d9cmxd6p6skwm"},{"name":"nodejs;javascript,promise,express","_id":"ciy8o6tfm000f9cmxaby9k6vh"},{"name":"nodejs","_id":"ciy8oiw520000k8mxchdwvtj3"},{"name":"promise","_id":"ciy8oiw530001k8mx75578t94"},{"name":"express","_id":"ciy8oiw540002k8mx4nvv9qcc"}]}}